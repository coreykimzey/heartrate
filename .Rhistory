library(heartrate)
library(heartrate)
tester <- updating_heartRate()
tester <- updating_heartRate()
linked <- gs_url("https://docs.google.com/spreadsheets/d/1_-0PuPB-YRDVx7AfOQfMQtKVYQ0CyCMDtLLIOW0h0es/edit?usp=sharing")
updated_data <- gs_read(linked)
library(heartrate)
linked <- gs_url("https://docs.google.com/spreadsheets/d/1_-0PuPB-YRDVx7AfOQfMQtKVYQ0CyCMDtLLIOW0h0es/edit?usp=sharing")
updated_data <- gs_read(linked)
linked <- gs_url("https://docs.google.com/spreadsheets/d/1_-0PuPB-YRDVx7AfOQfMQtKVYQ0CyCMDtLLIOW0h0es/edit?usp=sharing")
updated_data <- gs_read(linked)
library(googlesheets)
edit?usp=sharing
linked <- gs_url("https://docs.google.com/spreadsheets/d/1_-0PuPB-YRDVx7AfOQfMQtKVYQ0CyCMDtLLIOW0h0es/edit?usp=sharing")
gs_auth()
gs_auth(new_user = TRUE)
TOKENS <- gs_auth
TOKENS <- gs_auth()
TOKENS
saveRDS(TOKENS, "tokens.rds")
gs_auth(token = "token.rds")
gs_auth(token = "token.rds")
gs_auth(token = "C:/Users/ckimzey/Desktop/intro_to_computing/heartrate/vignettes/token.rds")
library(heartrate)
updating_heartRate()
library(knitr)
library(heartrate)
library(googlesheets)
tester <- updating_heartRate()
head(tester)
data(ckheartRate)
plot_cor(ckheartRate, col_names = c("Inf", "Computing"))
library(heartrate)
data(ckheartRate)
plot_cor(ckheartRate, col_names = c("Inf", "Computing"))
install.packages("forecast")
library(heartrate)
data(ckheartRate)
plot_cor(ckheartRate, col_names = c("Inf", "Computing"))
?plot_cor
library(heartrate)
?plot_cor
data(ckheartRate)
plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
dataset <- ckheartRate
col_names = c("Inf")
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
i = 1
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
line_needed
line_needed$model
line_needed$qr
summary(line_needed)
line_needed$coefficients
attr(line_needed$coefficients)
line_needed$effects
line_needed$model$`dataset$`Resting Heart Rate``
line_needed$model$`dataset`
line_needed$model$`dataset[, col_names[i]]`
plot_lms <- function(dataset, col_names, ...){
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
line_needed
}
}
data(ckheartRate)
plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
plot_lms <- function(dataset, col_names, ...){
linear_reg <- NULL
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- linear_reg
}
linear_reg
}
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- linear_reg
linear_reg[i] <- linear_reg
linear_reg <- NULL
linear_reg[i] <- linear_reg
linear_reg <- list()
linear_reg[i] <- linear_reg
linear_reg[i] <- line_needed
plot_lms <- function(dataset, col_names, ...){
linear_reg <- list()
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- line_needed
}
linear_reg
}
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
linear_reg <- list()
plot_lms <- function(dataset, col_names, ...){
linear_reg <- list()
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Correlation:", round(cor(dataset$"Resting Heart Rate",
dataset[,col_names[i]], use =  "complete.obs"),
digits = 3)))
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- line_needed
}
linear_reg
}
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
tester[1]
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- line_needed
plot_lms <- function(dataset, col_names, ...){
linear_reg <- list()
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Resting =", line_needed$coefficients[1],
col_names[i], + line_needed$coefficients[2]))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- line_needed
}
linear_reg
}
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
plot_lms <- function(dataset, col_names, ...){
linear_reg <- list()
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[1], 2),
col_names[i], "+", round(line_needed$coefficients[2],2)))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- line_needed
}
linear_reg
}
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
plot_lms <- function(dataset, col_names, ...){
linear_reg <- list()
par(mfrow=c(ceiling(length(col_names)/2), 2))
for(i in 1:length(col_names)){
line_needed <- lm(dataset$`Resting Heart Rate`~ dataset[,col_names[i]])
plot(dataset[,col_names[i]],
dataset$"Resting Heart Rate",
ylab = "Resting Heart Rate",
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
linear_reg[i] <- line_needed
}
linear_reg
}
data(ckheartRate)
tester <- plot_lms(ckheartRate, col_names  = c("Inf", "Computing"))
library(heartrate)
?plot_lms
plot_lms(updating_heartRate(), col_names + c("Inf", "Computing", "Probability"))
plot_lms(updating_heartRate(), col_names = c("Inf", "Computing", "Probability"))
plot_stressed(tester$`Resting Heart Rate`, tester$Day, xlab = "Day", ylab = " Resting Heart Rate" )
library(knitr)
library(heartrate)
library(googlesheets)
plot_stressed(tester$`Resting Heart Rate`, tester$Day, xlab = "Day", ylab = " Resting Heart Rate" )
tester <- updating_heartRate()
plot_stressed(tester$`Resting Heart Rate`, tester$Day, xlab = "Day", ylab = " Resting Heart Rate" )
plot_lms(tester, col_names = colnames(tester),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Inf", "Computing", "Probability", "Miles Walking"),
response_variable = "Resting Heart Rate")
View(tester)
plot_lms(tester, col_names = c("Inf", "Computing", "Probability", "Miles Walking"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Inf", "Computing", "Probability", "Miles Walking"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Inf", "Computing", "Probability"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Inf", "Computing", "Probability"),
response_variable = "Resting Heart Rate")
tester <- updating_heartRate()
plot_lms(tester, col_names = c("Inf", "Computing", "Probability"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles Walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
plot_cor(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
library(heartrate)
install.packages("tidyverse")
tester <- updating_heartRate()
#updating function
updating_heartRate <- function(){
linked <- gs_url("https://docs.google.com/spreadsheets/d/1_-0PuPB-YRDVx7AfOQfMQtKVYQ0CyCMDtLLIOW0h0es/edit?usp=sharing")
updated_data <- gs_read(linked)
return(updated_data)
}
tester <- updating_heartRate()
library(knitr)
library(heartrate)
library(googlesheets)
library(tidyverse)
library(googlesheets)
tester <- updating_heartRate()
tester
library(googlesheets)
tester <- updating_heartRate()
tester <- updating_heartRate()
tester
library(tidyverse)
? "%>%"
library(magrittr)
ranged <- tester$`Resting Heart Rate` %>%  target_ranges(, age = 24)
library(heartrate)
ranged <- tester$`Resting Heart Rate` %>%  target_ranges(, age = 24)
ranged
ranged <- tester$`Resting Heart Rate` %>%  target_ranges( age = 24)
ranged
tester$`Resting Heart Rate` %>%  target_ranges( age = 24) %>% select(low_range)
tester$`Resting Heart Rate` %>%  target_ranges( age = 24) %>% select(,low_range)
tester$`Resting Heart Rate` %>%  target_ranges( age = 24) %>% select("low_range")
tester$`Resting Heart Rate` %>%  target_ranges( age = 24) %>% select(1)
tester$`Resting Heart Rate` %>%  target_ranges( age = 24) %>%
select(1)
tester
library(heartrate)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
plot_stressed(tester$`Resting Heart Rate`, tester$Day, xlab = "Day", ylab = " Resting Heart Rate" )
dataset_heartRate <- ckheartRate$`Resting Heart Rate`
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(is.na(dataset_heartRate))
dataset_time <- dataset_time %>% as.tibble %>%  filter(is.na(dataset_heartRate))
dataset_time <- ckheartRate$Day
dataset_time <- dataset_time %>% as.tibble %>%  filter(is.na(dataset_heartRate))
dataset_time %>% as.tibble
is.na(dataset_heartRate)
dataset_heartRate <- ckheartRate$`Resting Heart Rate`
dataset_time <- dataset_time %>% as.tibble %>%  filter(is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(is.na(dataset_heartRate))
library(heartrate)
moving_average <- ma(dataset_heartRate, order_of_smoother)
library(forecast)
moving_average <- ma(dataset_heartRate, order_of_smoother)
moving_average <- ma(dataset_heartRate, 3)
plot_stressed <- function(dataset_heartRate, dataset_time = NULL, order_of_smoother = 3,
na.remove = TRUE, col_ma = "Red", col_dataset = "black", ...){
dataset_time <- dataset_time %>% as.tibble %>%  filter(is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(is.na(dataset_heartRate))
moving_average <- ma(dataset_heartRate, order_of_smoother)
if(is.null(dataset_time)){
plot(moving_average, col = col_ma, ...,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
lines(dataset_heartRate, col = col_dataset)
}else {
plot(dataset_time, moving_average, type = "l", col = col_dataset, ...,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
lines(dataset_heartRate, col = col_ma)
}
legend( "bottomright",legend = c("Moving Ave", "Actual"), lwd = 1, col = c(col_ma, col_dataset))
}
plot_stressed(tester$`Resting Heart Rate`, tester$Day, xlab = "Day", ylab = " Resting Heart Rate" )
dataset_time <- dataset_time %>% as.tibble %>%  filter(is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(is.na(dataset_heartRate))
moving_average <- ma(dataset_heartRate, order_of_smoother)
order_of_smoother = 3
moving_average <- ma(dataset_heartRate, order_of_smoother)
plot(dataset_time, moving_average, type = "l", col = col_dataset, ...,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(dataset_time, moving_average, type = "l", col = col_dataset,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(moving_average)
dataset_heartRate <- ckheartRate$`Resting Heart Rate`
dataset_time <- dataset_time %>% as.tibble %>%  filter(!is.na(dataset_heartRate))
dataset_time$ckheartRate$Day
dataset_time = ckheartRate$Day
dataset_time <- dataset_time %>% as.tibble %>%  filter(!is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(!is.na(dataset_heartRate))
moving_average <- ma(dataset_heartRate, order_of_smoother)
library(heartrate)
dataset_time <- dataset_time %>% as.tibble %>%  filter(!is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(!is.na(dataset_heartRate))
moving_average <- ma(dataset_heartRate, order_of_smoother)
plot(dataset_time, moving_average, type = "l", col = col_dataset,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(moving_average)
plot(moving_average, col = col_ma, ...,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(moving_average, col = col_ma,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(dataset_time)
plot(dataset_time, moving_average)
plot(as.dataset(dataset_time), moving_average)
plot(as.data.fram(dataset_time), moving_average)
plot(as.data.frame(dataset_time), moving_average)
as.dataset(dataset_time)
as.data.frame(dataset_time)
??tibble
plot(dataset_time, as.tibble(moving_average))
tst= as.data.frame(moving_average)
class(tst)
str(dataset_time)
str(moving_average)
plot(dataset_time$value, as.tibble(moving_average))
plot(dataset_time$value, moving_average)
library(heartrate)
dataset <- ckhe
dataset <- ckheartRate
dataset[,response_variable]
response_variable <- "Resting Heart Rate"
dataset[,response_variable]
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
tester <- updating_heartRate()
library(googlesheets)
tester <- updating_heartRate()
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
col_names = "Inf"
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
i = 1
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
plot(dataset[,col_names[i]],
dataset[,response_variable],
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
class(dataset)
class(tester)
class(tester[, response_variable])
dataset[,response_variable]$value
dataset
dataset <- updating_heartRate()
dataset[,response_variable]$value
dataset[,response_variable]
response_col <- dataset %>% select(response_variable)
predictor_col <- dataset %>% select(col_names[i])
line_needed <- lm(response_col~ predictor_col)
response_col <- dataset %>% select(response_variable)
predictor_col <- dataset %>% select(col_names[i])
class(response_col)
line_needed <- dataset %>% lm(response_variable~col_names[i])
response_col <- dataset %>% select(response_variable) %>%  select(1)
lm(response_col)
response_col
response_col <- dataset %>% select(response_variable) %>%  unname()
response_col
response_col <- dataset %>% select(response_variable) %>% filter(all())
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
dataset[,response_variable]
?lm
line_needed <- lm(response_variable ~ col_names[i], data = dataset)
dataset[, response_variable]
dataset[, col_names[i]]
str(dataset)
i
line_needed <- lm(response_variable ~ col_names[i], data = dataset)
f = formula(response_variable ~ col_names[i])
f
f = formula(response_variable ~ eval(col_names[i]))
f
str(dataset)
line_needed <- lm(names(dataset)[2] ~ col_names[i], data = dataset)
line_needed <- lm(dataset[,2] ~ dataset[,4])
line_needed <- lm(as.vector(dataset[,2]) ~ as.vector(dataset[,4]))
str(dataset)
attr(dataset
)
attributes(dataset)
str(tst)
tst=as.data.frame()
tst=as.data.frame
str(tst)
tst=as.data.frame(dataset)
str(tst)
tst
testing <- col_names[i]
line_needed <- lm(response_variable ~ testing, data = dataset)
d1=response_variable
d1
response_variable=dataset[,2]
d1=response_variable
d1
d1=as.vector(response_variable)
d1
d1=response_variable[[1]]
d12
d1
testing=col_names[i]
testing
testing=dataset[[col_names[i]]]
testing
testing <- dataset[[col_names[i]]]
line_needed <- lm(response_variable ~ testing)
line_needed <- lm(response_col ~ testing)
response_col <- dataset[[response_variable]]
response_variable <- "Resting Heart Rate"
response_col <- dataset[[response_variable]]
testing <- dataset[[col_names[i]]]
line_needed <- lm(response_col ~ testing)
plot(dataset[,col_names[i]],
dataset[,response_variable],
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
plot(predictor_col,
response_col,
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
class(predictor_col)
predictor_col <- dataset[[col_names[i]]]
plot(predictor_col,
response_col,
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2]
)
