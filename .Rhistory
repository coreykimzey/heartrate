dataset_time = ckheartRate$Day
dataset_time <- dataset_time %>% as.tibble %>%  filter(!is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(!is.na(dataset_heartRate))
moving_average <- ma(dataset_heartRate, order_of_smoother)
library(heartrate)
dataset_time <- dataset_time %>% as.tibble %>%  filter(!is.na(dataset_heartRate))
dataset_heartRate <- dataset_heartRate %>% as.tibble %>% filter(!is.na(dataset_heartRate))
moving_average <- ma(dataset_heartRate, order_of_smoother)
plot(dataset_time, moving_average, type = "l", col = col_dataset,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(moving_average)
plot(moving_average, col = col_ma, ...,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(moving_average, col = col_ma,
ylim = c(min(dataset_heartRate, moving_average, na.rm = TRUE),
max(dataset_heartRate,
moving_average, na.rm = TRUE)))
plot(dataset_time)
plot(dataset_time, moving_average)
plot(as.dataset(dataset_time), moving_average)
plot(as.data.fram(dataset_time), moving_average)
plot(as.data.frame(dataset_time), moving_average)
as.dataset(dataset_time)
as.data.frame(dataset_time)
??tibble
plot(dataset_time, as.tibble(moving_average))
tst= as.data.frame(moving_average)
class(tst)
str(dataset_time)
str(moving_average)
plot(dataset_time$value, as.tibble(moving_average))
plot(dataset_time$value, moving_average)
library(heartrate)
dataset <- ckhe
dataset <- ckheartRate
dataset[,response_variable]
response_variable <- "Resting Heart Rate"
dataset[,response_variable]
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
tester <- updating_heartRate()
library(googlesheets)
tester <- updating_heartRate()
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
col_names = "Inf"
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
i = 1
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
plot(dataset[,col_names[i]],
dataset[,response_variable],
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
plot_lms(tester, col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
class(dataset)
class(tester)
class(tester[, response_variable])
dataset[,response_variable]$value
dataset
dataset <- updating_heartRate()
dataset[,response_variable]$value
dataset[,response_variable]
response_col <- dataset %>% select(response_variable)
predictor_col <- dataset %>% select(col_names[i])
line_needed <- lm(response_col~ predictor_col)
response_col <- dataset %>% select(response_variable)
predictor_col <- dataset %>% select(col_names[i])
class(response_col)
line_needed <- dataset %>% lm(response_variable~col_names[i])
response_col <- dataset %>% select(response_variable) %>%  select(1)
lm(response_col)
response_col
response_col <- dataset %>% select(response_variable) %>%  unname()
response_col
response_col <- dataset %>% select(response_variable) %>% filter(all())
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
line_needed <- lm(dataset[,response_variable]~ dataset[,col_names[i]])
dataset[,response_variable]
?lm
line_needed <- lm(response_variable ~ col_names[i], data = dataset)
dataset[, response_variable]
dataset[, col_names[i]]
str(dataset)
i
line_needed <- lm(response_variable ~ col_names[i], data = dataset)
f = formula(response_variable ~ col_names[i])
f
f = formula(response_variable ~ eval(col_names[i]))
f
str(dataset)
line_needed <- lm(names(dataset)[2] ~ col_names[i], data = dataset)
line_needed <- lm(dataset[,2] ~ dataset[,4])
line_needed <- lm(as.vector(dataset[,2]) ~ as.vector(dataset[,4]))
str(dataset)
attr(dataset
)
attributes(dataset)
str(tst)
tst=as.data.frame()
tst=as.data.frame
str(tst)
tst=as.data.frame(dataset)
str(tst)
tst
testing <- col_names[i]
line_needed <- lm(response_variable ~ testing, data = dataset)
d1=response_variable
d1
response_variable=dataset[,2]
d1=response_variable
d1
d1=as.vector(response_variable)
d1
d1=response_variable[[1]]
d12
d1
testing=col_names[i]
testing
testing=dataset[[col_names[i]]]
testing
testing <- dataset[[col_names[i]]]
line_needed <- lm(response_variable ~ testing)
line_needed <- lm(response_col ~ testing)
response_col <- dataset[[response_variable]]
response_variable <- "Resting Heart Rate"
response_col <- dataset[[response_variable]]
testing <- dataset[[col_names[i]]]
line_needed <- lm(response_col ~ testing)
plot(dataset[,col_names[i]],
dataset[,response_variable],
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
plot(predictor_col,
response_col,
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
class(predictor_col)
predictor_col <- dataset[[col_names[i]]]
plot(predictor_col,
response_col,
ylab = response_variable,
xlab = col_names[i],
main = paste("Resting =", round(line_needed$coefficients[2], 2),
col_names[i], "+", round(line_needed$coefficients[1],2)))
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2], ... )
abline(a = line_needed$coefficients[1], b = line_needed$coefficients[2]
)
library(heartrate)
tester <- updating_heartRate()
response_columns <- tester[[c("Inf", "Computing")]]
response_columns <- tester[c("Inf", "Computing")]
response_variable <- "Resting Heart Rate"
col_names = c("Inf", "Computing")
response_col <- dataset[[response_variable]]
dataset <- tester
response_col <- dataset[[response_variable]]
predictor_col <- dataset[col_names]
line_needed <- lm(response_col ~ predictor_col)
predictor_col <- dataset[[col_names]]
predictor_col <- data.frame()
i = 1
predictor_col[,i] <- dataset[[col_names[i]]]
predictor_col <- matrix()
predictor_col[,i] <- dataset[[col_names[i]]]
predictor_col <- matrix(nrow = 36, ncol = length(col_names))
predictor_col[,i] <- dataset[[col_names[i]]]
predictor_col[,i]
dataset[[col_names[i]]]
predictor_col <- matrix(nrow = length(dataset), ncol = length(col_names))
predictor_col <- matrix(nrow = nrow(dataset), ncol = length(col_names))
predictor_col[,i] <- dataset[[col_names[i]]]
response_col <- dataset[[response_variable]]
predictor_col <- matrix(nrow = nrow(dataset), ncol = length(col_names))
for(i in 1:length(col_names)){
predictor_col[,i] <- dataset[[col_names[i]]]
}
line_needed <- lm(response_col ~ predictor_col)
tester %>% plot_lms(., col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
library(knitr)
library(heartrate)
library(googlesheets)
library(tidyverse)
library(forecast)
tester %>% plot_lms(., col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
library(heartrate)
tester %>% plot_lms(., col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate", multivariate = TRUE)
colnames(predictor_col) <- col_names
line_needed <- lm(response_col ~ predictor_col)
summary(line_needed)
predictor_col <- data.frame(nrow = nrow(dataset), ncol = length(col_names))
for(i in 1:length(col_names)){
predictor_col[,i] <- dataset[[col_names[i]]]
}
predictor_col <- as.data.frame(matrix(nrow = nrow(dataset), ncol = length(col_names)))
for(i in 1:length(col_names)){
predictor_col[,i] <- dataset[[col_names[i]]]
}
colnames(predictor_col) <- col_names
line_needed <- lm(response_col ~ predictor_col)
View(predictor_col)
View(predictor_col)
class(predictor_col)
colnames(predictor_col) <- col_names
final_data_frame <- cbind(response_col, predictor_col)
ine_needed <- lm(response_col ~ predictor_col)
typeof(predictor_col)
predictor_col <- as.data.frame(matrix(nrow = nrow(dataset), ncol = length(col_names)))
for(i in 1:length(col_names)){
predictor_col[,i] <- dataset[[col_names[i]]]
}
typeof(predictor_col)
predictor_col <- as.data.frame(matrix(nrow = nrow(dataset), ncol = length(col_names)))
typeof(predictor_col)
typeof(dataset)
typeof(final_data_frame)
typeof(ckheartRate)
predictor_col <- matrix(nrow = nrow(dataset), ncol = length(col_names))
for(i in 1:length(col_names)){
predictor_col[,i] <- dataset[[col_names[i]]]
}
line_needed <- lm(response_col ~ predictor_col)
line_needed$terms
line_needed$coefficients
names(line_needed$coefficients)[2:3] <- col_names
summary(line_needed)
library(heartrate)
tester %>% plot_lms(., col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate", multivariate = TRUE)
names(line_needed$coefficients)[2:length(col_names) +1] <- col_names
2:length(col_names) +1
names(line_needed$coefficients)[2:(length(col_names)+1)] <- col_names
names(line_needed$coefficients)[2:(length(col_names)+1)] <- col_names
2:(length(col_names)+1)
library(heartrate)
tester %>% plot_lms(., col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate", multivariate = TRUE)
tester <- updating_heartRate()
tester
tester %>% boxplot()
tester %>% select("Resting Heart Rate") %>%  boxplot()
tester2 <- tester %>% filter(-1)
tester2 <- tester %>% filter(all())
all()
tester2 <- tester %>% filter(2:nrow(tester))
tester2 <- tester %>% filter("Resting Heart Rate" > 50)
tester2
tester2 <- tester %>% filter("Resting Heart Rate" > 70)
tester2 <- tester %>% filter("Resting Heart Rate" >= 70)
tester2 <- tester[-1,]
plot(tester2$Date, tester2$"Resting Heart Rate", type = "l",
ylab = "Resting Heart Rate(Beats Per Min)", xlab = "Date")
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
tester$days_of_week <- days_of_week
mean_ave <- by(tester$`Resting Heart Rate`, tester$days_of_week, function(x) mean(x, na.rm = TRUE))
tester2$days_of_week <- days_of_week
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
tester2$days_of_week <- days_of_week
plot(tester2$Date, tester2$"Resting Heart Rate", type = "l",
ylab = "Resting Heart Rate(Beats Per Min)", xlab = "Date")
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
tester2$days_of_week <- days_of_week
class(tester2)
tester2
tester$days_of_week <- days_of_week
tester <- mutate(days_of_week = days_of_week)
tester %>%  mutate(days_of_week = days_of_week)
days_of_week <- rep(days_of_week, 34)
days_of_week
7*34
days_of_week <- rep(days_of_week, 100)[34]
tester %>%  mutate(days_of_week = days_of_week)
tester <- tester %>%  mutate(days_of_week = days_of_week)
tester$days_of_week
days_of_week <- seq(days_of_week, 100)[34]
days_of_week <- rep(days_of_week, 100)[1:34]
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
days_of_week <- rep(days_of_week, 100)[1:34]
tester <- tester %>%  mutate(days_of_week = days_of_week)
tester$days_of_week
days_of_week
tester$days_of_week <- days_of_week
tester$days_of_week
tester
tester2$days_of_week <- days_of_week
days_of_week <- rep(days_of_week, 100)[1:33]
tester2$days_of_week <- days_of_week
mean_ave <- by(tester2$`Resting Heart Rate`, tester2$days_of_week, function(x) mean(x, na.rm = TRUE))
mean_ave_df <- as.data.frame(do.call(rbind, list(mean_ave)))
kable(mean_ave_df)
saver <- TukeyHSD(aov(tester2$`Resting Heart Rate` ~ tester2$days_of_week))
kable(saver$`tester$days_of_week`)
tester2 %>% plot_lms(., col_names = c("Inf", "Computing", "Probability"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
library(heartrate)
tester2 %>% plot_lms(., col_names = c("Inf", "Computing", "Probability"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
tester <- tester %>% mutate(lag_sleep = lag(tester$"Estimated Sleep", 1),
lag_walking= lag(tester$"Miles walking", 1),
lag_hwk_total = lag(tester$"Hrs on Hwk", 1))
tester %>% plot_lms(., col_names = c("lag_sleep", "lag_walking", "lag_hwk_total"),
response_variable = "Resting Heart Rate")
tester2 <- tester[-1,]
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
days_of_week <- rep(days_of_week, 100)[1:33]
tester2$days_of_week <- days_of_week
tester2 %>% plot_lms(., col_names = c("lag_sleep", "lag_walk", "lag_hwk_total"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
tester2 %>% plot_lms(., col_names = c("lag_sleep", "lag_walking
", "lag_hwk_total"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
tester2 %>% plot_lms(., col_names = c("lag_sleep", "lag_walking", "lag_hwk_total"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
tester2 <- tester2 %>% mutate(lag_inf = lag(tester2$"Inf", 1),
lag_comp= lag(tester2$"Computing", 1),
lag_prob = lag(tester2$"Probability", 1),
lag_other = lag(tester2$Other))
tester2 %>% plot_lms(., col_names = c("Inf", "Computing", "Probability", "Other"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
tester2 %>% plot_lms(., col_names = c("Inf", "Computing", "Probability", "Other"),
response_variable = "Resting Heart Rate")
tester2 %>% plot_lms(., col_names = c("lag_inf", "lag_comp", "lag_prob", "lag_other"),
response_variable = "Resting Heart Rate")
tester2 %>% plot_lms(., col_names = c("lag_inf", "lag_comp", "lag_prob", "lag_other"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
days_of_week <- rep(days_of_week, 100)[1:33]
tester2$days_of_week <- days_of_week
mean_ave <- by(tester2$`Resting Heart Rate`, tester2$days_of_week, function(x) mean(x, na.rm = TRUE))
mean_ave_df <- as.data.frame(do.call(rbind, list(mean_ave)))
kable(mean_ave_df)
tester2 %>% plot_lms(., col_names = c("lag_sleep", "lag_walking", "lag_hwk_total"),
response_variable = "Resting Heart Rate",
multivariate = TRUE )
tester2 %>% plot_lms(., col_names = c("lag_sleep", "lag_walking", "lag_hwk_total"),
response_variable = "Resting Heart Rate",
multivariate = FALSE)
tester2 %>% plot_lms(., col_names = c("Inf", "Computing", "Probability", "Other"),
response_variable = "Resting Heart Rate")
tester2 %>% plot_lms(., col_names = c("lag_inf", "lag_comp", "lag_prob", "lag_other"),
response_variable = "Resting Heart Rate")
days_of_week <- rep(days_of_week, 100)[1:33]
tester <- updating_heartRate
library(heartrate)
tester <- updating_heartRate()
tester2 <- tester[-1,]
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
days_of_week <- rep(days_of_week, 100)[1:33]
tester2$days_of_week <- days_of_week
rep(days_of_week, 100)[1:33]
days_of_week <- rep(days_of_week, 100)[1:nrow(tester2)]
tester2$days_of_week <- days_of_week
library(heartrate)
library(heartrate)
ckheartrate
library(heartrate)
data("ckheartRate")
ckheartRate
load("C:/Users/ckimzey/Desktop/intro_to_computing/heartrate/data/ckheartRate.rda")
data("ckheartRate")
ckheartRate <- as.tibble(ckheartRate)
library(tidyverse)
ckheartRate <- as.tibble(ckheartRate)
ckheartRate
save(ckheartRate, file = "~/data/ckheartRate.rda")
save(ckheartRate, file = "C:/Users/ckimzey/Desktop/intro_to_computing/data/ckheartRate.rda")
save(ckheartRate, file = "C:/Users/ckimzey/Desktop/intro_to_computing/heartrate/data/ckheartRate.rda")
load("C:/Users/ckimzey/Desktop/intro_to_computing/heartrate/data/ckheartRate.rda")
data("ckheartRate")
library(heartrate)
library(knitr)
library(heartrate)
library(googlesheets)
library(tidyverse)
library(forecast)
data("ckheartRate")
ckheartRate
tester <- updating_heartRate()
tester
ranged <- target_ranges(tester$`Resting Heart Rate`, time_data = tester$Date,
age = 24)
plot(ranged[,1], ranged[,2], type = "l", ylim = c(min(ranged[,2]),
max(ranged[,3])),
xlab = "Date",
ylab = "Heart Rate (Beats Per Min)" )
lines(ranged[,1], ranged[,3], type = "l")
plot_stressed(tester$`Resting Heart Rate`, tester$Date, xlab = "Date",
ylab = " Resting Heart Rate (Beats Per Min)")
par(mar= c(5.0, 4.0, 3.0, 2))
tester %>% plot_lms(., col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate", multivariate = TRUE)
par(mar= c(5.0, 4.0, 3.0, 2))
tester <- tester %>% mutate(lag_sleep = lag(tester$"Estimated Sleep", 1),
lag_walking= lag(tester$"Miles walking", 1),
lag_hwk_total = lag(tester$"Hrs on Hwk", 1))
tester %>% plot_lms(., col_names = c("lag_sleep", "lag_walking", "lag_hwk_total"),
response_variable = "Resting Heart Rate")
par(mar = c(4.1, 4.1,4.1,1.1))
tester %>% plot_cor(. ,col_names = c("Hrs on Hwk", "Miles walking", "Estimated Sleep"),
response_variable = "Resting Heart Rate")
tester %>% select("Resting Heart Rate") %>%  boxplot()
tester2 <- tester[-1,]
plot(tester2$Date, tester2$"Resting Heart Rate", type = "l",
ylab = "Resting Heart Rate(Beats Per Min)", xlab = "Date")
days_of_week <- as.factor(c("T", "W", "Th", "F", "S", "Su", "M"))
days_of_week <- rep(days_of_week, 100)[1:nrow(tester2)]
tester2$days_of_week <- days_of_week
mean_ave <- by(tester2$`Resting Heart Rate`, tester2$days_of_week, function(x) mean(x, na.rm = TRUE))
mean_ave_df <- as.data.frame(do.call(rbind, list(mean_ave)))
kable(mean_ave_df)
saver <- TukeyHSD(aov(tester2$`Resting Heart Rate` ~ tester2$days_of_week))
kable(saver$`tester$days_of_week`)
tester2 %>% plot_lms(., col_names = c("lag_sleep", "lag_walking", "lag_hwk_total"),
response_variable = "Resting Heart Rate",
multivariate = TRUE)
tester2 %>% plot_lms(., col_names = c("Inf", "Computing", "Probability", "Other"),
response_variable = "Resting Heart Rate")
tester2 <- tester2 %>% mutate(lag_inf = lag(tester2$"Inf", 1),
lag_comp= lag(tester2$"Computing", 1),
lag_prob = lag(tester2$"Probability", 1),
lag_other = lag(tester2$Other))
tester2 %>% plot_lms(., col_names = c("lag_inf", "lag_comp", "lag_prob", "lag_other"),
response_variable = "Resting Heart Rate")
kable(mean_ave_df)
kable(saver$`tester$days_of_week`)
saver <- TukeyHSD(aov(tester2$`Resting Heart Rate` ~ tester2$days_of_week))
tester2$days_of_week
saver$`tester2$days_of_week`
kable(saver$`tester$days_of_week`, col.names = colnames(saver$`tester2$days_of_week`))
saver$`tester2$days_of_week`
saver$`tester2$days_of_week`[1,]
colnames(saver$`tester2$days_of_week`)
rownames(saver$`tester2$days_of_week`)
kable(saver$`tester$days_of_week`)
kable(as.matrix(saver$`tester$days_of_week`))
class(saver$`tester$days_of_week`)
saver$`tester2$days_of_week`
saver2 <- saver$`tester$days_of_week`
saver$`tester$days_of_week`
kable(saver$`tester2$days_of_week`)
tester <- updating_heartRate()
tester <- updating_heartRate()
library(knitr)
library(heartrate)
library(googlesheets)
library(tidyverse)
library(forecast)
tester <- updating_heartRate()
tester
save(tester, "data\ckheartrate")
save(tester, "data/ckheartrate")
save(tester, "./data/ckheartRate.rda")
save(tester, "~/data/ckheartRate.rda")
save(tester, file = "~/data/ckheartRate.rda")
setwd("C:/Users/ckimzey/Desktop/intro_to_computing/heartrate")
save(tester, file = "~/data/ckheartRate.rda")
save(tester, file = "/data/ckheartRate.rda")
save(tester, file = "./data/ckheartRate.rda")
data("ckheartRate")
ckheartRate
chkheartRate
ckheartRate
tester <- updating_heartRate()
tester
tail(tester)
tester <- updating_heartRate()
save(tester, file = "./data/ckheartRate.rda")
library(heartrate)
library(heartrate)
ckheartRate
data("ckheartRate")
ckheartRate
library(knitr)
library(heartrate)
library(googlesheets)
library(tidyverse)
library(forecast)
data("ckheartRate")
tester
save(tester, file = "./data/tester.rda")
library(heartrate)
library(heartrate)
library(heartrate)
library(heartrate)
library(heartrate)
library(heartrate)
library(heartrate)
library(heartrate)
library(heartrate)
